#!/bin/sh
# shellcheck disable=SC2016
set -e
. "${0%/*}/includes.sh"
cd_root

# Ensure the user has the bare essentials installed
h1 "Checking dependencies…"
have ruby gem git
have bundle || cmd 'gem install bundler'

# Require Ruby v2.5+ and Bundler v1.10.0+
unset ruby_outdated
unset bundle_outdated
ruby_version=`ruby -e 'puts RUBY_VERSION'`
bundle_version=`bundle --version || :`
bundle_version="${bundle_version##* }"
vercmp "$ruby_version"   v2.5    || ruby_outdated=1
vercmp "$bundle_version" v1.10.0 || bundle_outdated=1

# Handle missing dependencies
case `uname -s` in
	# macOS
	Darwin)
		# Homebrew
		if have brew; then
			cmd 'brew bundle check >/dev/null 2>&1' || {
				h1 "Installing dependencies with Homebrew…"
				cmd 'brew bundle'
			}
			[ -z "$ruby_outdated" ] || {
				h1 "Installing Ruby with Homebrew…"
				cmd 'brew install ruby'
			}

		# MacPorts
		elif have ports; then
			h1 "Installing dependencies with MacPorts…"
			cmd 'sudo port -NR selfupdate'
			cmd 'sudo port -N install cmake pkgconfig icu docker'

		# No package manager installed; check for dependencies instead
		else
			have cmake pkg-config docker
		fi
	;;

	# Linux-based OS
	Linux)
		# Ubuntu/Debian-based distros
		if have apt-get; then
			set -- cmake pkg-config libicu-dev docker.io ruby ruby-dev zlib1g-dev build-essential libssl-dev
			cmd 'sudo apt-get update'
			cmd "sudo apt-get install $*"
		fi
	;;
esac

# Upgrade Bundler, if needed
if [ "$bundle_outdated" ]; then
	h1 "Upgrading Bundler…"
	cmd 'gem install bundler'
fi

h1 "Installing gems…"
cmd 'bundle config --local path vendor/gems'
cmd 'bundle check >/dev/null 2>&1 || bundle install'

h1 "Initialising submodules…"
cmd 'git submodule init'
cmd 'git submodule sync --quiet'
cmd 'script/fast-submodule-update'

h1 "Generating samples…"
cmd 'bundle exec rake samples >/dev/null 2>&1'
